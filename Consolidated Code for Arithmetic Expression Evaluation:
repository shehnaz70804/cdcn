Consolidated Code for Arithmetic Expression Evaluation:
arith_expr.l (Lex file for lexical analysis)
c
Copy code
%{
#include <stdio.h>
#include <stdlib.h>
%}

%token NUM
%token PLUS MINUS MUL DIV
%token LPAREN RPAREN

%%

[0-9]+            { yylval = atoi(yytext); return NUM; }
"+"               { return PLUS; }
"-"               { return MINUS; }
"*"               { return MUL; }
"/"               { return DIV; }
"("               { return LPAREN; }
")"               { return RPAREN; }
[ \t\n]           { /* Skip spaces, tabs, and newlines */ }

%%

int yywrap() {
    return 1;
}

arith_expr.y (YACC file for parsing)
c
Copy code
%{
#include <stdio.h>
#include <stdlib.h>

int yylex();
void yyerror(const char *s);

%}

%token NUM
%token PLUS MINUS MUL DIV
%token LPAREN RPAREN

%%

program:
    expression { printf("Result: %d\n", $1); }
;

expression:
      NUM                     { $$ = $1; }
    | expression PLUS expression { $$ = $1 + $3; }
    | expression MINUS expression { $$ = $1 - $3; }
    | expression MUL expression { $$ = $1 * $3; }
    | expression DIV expression { $$ = $1 / $3; }
    | LPAREN expression RPAREN  { $$ = $2; }
;

%%

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}

int main() {
    printf("Enter an arithmetic expression: ");
    yyparse();
    return 0;
}

Sample Input and Output:
Input:
scss
Copy code
3 + 5 * (2 - 8)

Output:
makefile
Copy code
Result: -13
